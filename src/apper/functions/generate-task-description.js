// Custom action to generate task descriptions using OpenAI API

// Global declarations for Apper runtime
const apper = globalThis.apper;
const Response = globalThis.Response;

apper.serve(async (req) => {
  try {
    // Only allow POST method
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Method not allowed' 
        }),
        { 
          status: 405, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Parse request body
    const body = await req.json();
    const { title } = body;

    // Validate input
    if (!title || typeof title !== 'string' || title.trim().length === 0) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Title is required and must be a non-empty string' 
        }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Get OpenAI API key from secrets
    const openaiApiKey = apper.getSecret('OPENAI_API_KEY');
    if (!openaiApiKey) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'OpenAI API key not configured' 
        }),
        { 
          status: 500, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are a helpful assistant that generates detailed, actionable task descriptions based on task titles. The descriptions should be practical, specific, and help someone understand what needs to be accomplished. Keep descriptions between 2-4 sentences and focus on the "what" and "how" of the task.'
          },
          {
            role: 'user',
            content: `Generate a detailed task description for: "${title.trim()}"`
          }
        ],
        max_tokens: 150,
        temperature: 0.7
      })
    });

    // Check if OpenAI API call was successful
    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json().catch(() => ({}));
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: `OpenAI API error: ${errorData.error?.message || 'Unknown error'}` 
        }),
        { 
          status: 500, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    const openaiData = await openaiResponse.json();
    
    // Extract generated description
    const generatedDescription = openaiData.choices?.[0]?.message?.content?.trim();
    
    if (!generatedDescription) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'No description generated by OpenAI' 
        }),
        { 
          status: 500, 
          headers: { 'Content-Type': 'application/json' } 
        }
      );
    }

    // Return successful response
    return new Response(
      JSON.stringify({ 
        success: true, 
        description: generatedDescription 
      }),
      { 
        status: 200, 
        headers: { 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Generate task description error:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: 'Internal server error' 
      }),
      { 
        status: 500, 
        headers: { 'Content-Type': 'application/json' } 
      }
    );
  }
});